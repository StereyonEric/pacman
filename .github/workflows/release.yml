name: Release and Deploy to Production

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Enter Release Tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  release_and_deploy:
    runs-on: ubuntu-latest

    steps:
    # checkout the repo with full commit history
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # fetch the entire commit history

    # generate release notes from commit history
    - name: Generate Release Notes
      run: |
        previous_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "initial commit")
        echo "Previous tag: ${previous_tag}"

        if [ "${previous_tag}" = "initial commit" ]; then
          echo "No previous tag found. Generating release notes from the beginning of the repository."
          git log --pretty=format:"* %s" > release_notes.txt
        else
          echo "Generating release notes from ${previous_tag} to HEAD."
          git log ${previous_tag}..HEAD --pretty=format:"* %s" > release_notes.txt
        fi
        
        echo "Generated Release Notes:"
        cat release_notes.txt

    # publish release notes as an artifact
    - name: Publish Release Notes Artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: release_notes.txt

    # create and push the release tag
    - name: Checkout Branch, Create and Push Release Tag
      run: |
        git checkout ${{ github.ref_name }}
        git fetch --tags
        
        if git rev-parse ${{ github.event.inputs.releaseTag }} >/dev/null 2>&1; then
          echo "Tag ${{ github.event.inputs.releaseTag }} already exists."
        else
          echo "Tag ${{ github.event.inputs.releaseTag }} does not exist. Creating tag..."
          git tag ${{ github.event.inputs.releaseTag }}
        fi
        
        echo "Pushing tag ${{ github.event.inputs.releaseTag }} to remote."
        git push origin ${{ github.event.inputs.releaseTag }}

    # create a github release
    - name: Create GitHub Release
      run: |
        echo "Preparing to create GitHub release for tag ${{ github.event.inputs.releaseTag }}"
        escaped_release_notes=$(sed ':a;N;$!ba;s/\n/\\n/g' release_notes.txt)
        echo "Escaped Release Notes: ${escaped_release_notes}"

        echo "Creating GitHub release for tag ${{ github.event.inputs.releaseTag }}"
        curl -X POST -H "Authorization: token ${{ secrets.MY_GITHUB_TOKEN }}" -H "Content-Type: application/json" \
          -d '{
            "tag_name": "'${{ github.event.inputs.releaseTag }}'",
            "name": "'${{ github.event.inputs.releaseTag }}'",
            "body": "'"${escaped_release_notes}"'",
            "draft": false,
            "prerelease": false,
            "target_commitish": "'"${{ github.ref_name }}"'"
          }' https://api.github.com/repos/danielmcr1/pacman/releases

    # deploy to azure static web apps
    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        app_location: '/'  # root directory for the app
        api_location: ''   # no api used
        output_location: '/'  # build output located in the root directory
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}  # the deployment token from azure secrets
