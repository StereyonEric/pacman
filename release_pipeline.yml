trigger:
  tags:
    include:
      - '*'  # runs only when a tag is pushed

pr: none  # prevents automatic runs for PRs

parameters:
- name: releaseTag
  type: string
  default: 'v1.0.0'
  displayName: 'Enter Release Tag (e.g., v1.0.0)'

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: pacman-vars
- name: MY_APP_LOCATION
  value: "/"  
- name: MY_API_LOCATION
  value: ""  
- name: MY_APP_ARTIFACT_LOCATION
  value: "/"  

stages:
- stage: ReleaseAndDeploy
  displayName: "Release and Deploy to Production"
  jobs:
  - job: CreateReleaseAndDeploy
    displayName: "Create Release, Publish Release Notes, and Deploy"
    steps:
    - checkout: self
      persistCredentials: true
      fetchDepth: 0

    # generate release notes from commit history since the last tag
    - script: |
        echo "Generating release notes from commit history..."
        previous_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "initial commit")
        echo "Previous tag: ${previous_tag}"
        
        if [ "${previous_tag}" = "initial commit" ]; then
          echo "No previous tag found. Generating release notes from the beginning of the repository."
          git log --pretty=format:"* %s" > release_notes.txt
        else
          echo "Generating release notes from ${previous_tag} to HEAD on master."
          git log ${previous_tag}..HEAD --pretty=format:"* %s" > release_notes.txt
        fi
        
        echo "Generated Release Notes:"
        cat release_notes.txt
      displayName: "Generate Release Notes"

    # publish the release notes as a pipeline artifact
    - task: PublishBuildArtifacts@1
      displayName: "Publish Release Notes Artifact"
      inputs:
        pathToPublish: 'release_notes.txt'
        artifactName: 'release-notes'

    # create a github release with the release notes
    - script: |
        echo "Creating GitHub release for tag ${{ parameters.releaseTag }}..."
        escaped_release_notes=$(sed ':a;N;$!ba;s/\n/\\n/g' release_notes.txt)
        
        curl -X POST -H "Authorization: token $(GITHUB_TOKEN)" -H "Content-Type: application/json" \
          -d '{
            "tag_name": "'${{ parameters.releaseTag }}'",
            "name": "'${{ parameters.releaseTag }}'",
            "body": "'"${escaped_release_notes}"'",
            "draft": false,
            "prerelease": false
          }' https://api.github.com/repos/danielmcr1/pacman/releases
      displayName: "Create GitHub Release"

    # deploy to production
    - task: AzureStaticWebApp@0
      displayName: "Deploy to Azure Static Web Apps"
      inputs:
        app_location: '$(MY_APP_LOCATION)'  
        api_location: '$(MY_API_LOCATION)'  
        output_location: '$(MY_APP_ARTIFACT_LOCATION)'  
        azure_static_web_apps_api_token: '$(AZURE_STATIC_WEB_APPS_API_TOKEN_PROD)'  
